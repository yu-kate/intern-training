//scripts.js
console.log("Hello World");
etc..

<!DOCTYPE html>
<script src="scripts.js"></script>
to link js file instead of writing all js in b/w <script></script>

Node.js = js runtime, exectues w/o using browser
nvm = node version manager

let var_name = value; //block scoped
var var_name = value; //fn scoped
const var_name = value;

primitive data types: string, number, bigInt, boolean, null, undefined
console.log(typeof var); //returns var type

== will cast items to same type, === won't
"10"-1 = 9
"10"+1 = 101; plus concatenates

objects store references to addresses  
assigning one object to another will copy over the original object's references = shallow 
to assign/copy the actual value's of an object's references with new addresses...
const arr = [2, 3, 4];
const arr2 = [...arr]; //spread operator

above data types = object.
to create own object..
const obj_name = { //similar to python dict
    att1: "Fido";
    att2: "dog";
}
obj_name["att1"] == obj_name.att1 == "Fido"

functions:
function fn_name (params) {
    ...
    return ...; //optional, do notn include if void 
}
since no data return types for fns, use type casting:
one ex: Number("2") => 2\


FIRST-CLASS FUNCTIONS: functions treated like a data type, like an object; can assign to variables
let thing = a_fn;
thing(...); // works like a_fn(...); thing is reference to a_fn
Allows for passing functions as arguments

Anonymous/Lambda Functions: one-time use disposable fns
let nums = [2, 3, 4];
nums.map(function (x) {return x*2;}); //map creates new array by calling a fn on every elem in og array
nums.map((x) => {return x*2;}); //same thing using arrow functions

for loops:
for (let num of nums) { // of used for iterable items like in an array
    console.log(num);}
for (name in classRoster) {...} //in used for enumerable items without needing to order them


DOM application:
<div>You have <span id="likes-counter">0</span> upvotes.</div>
<button id="incrementer">Upvote!</button>
<button id="decrementer">Downvote!</button>

let likeCounterElement = document.getElementById("likes-counter");
const buttonIncrementer = document.getElementById("incrementer");
buttonIncrementer.addEventListener("click", function () { //uses lambda fn here
  const currentLikes = Number(likeCounterElement.innerHTML);
  likeCounterElement.innerHTML = currentLikes + 1;
});
document.getElementById("decrementer").addEventListener("click", () => {
  const currentLikes = Number(likeCounterElement.innerHTML);
  likeCounterElement.innerHTML = currentLikes - 1;
});

useful things:
document.getElementByID()
addEventListener(string eventName, function callBack)
    possible events: onchange, onclick, onmouseover, onmouseout, onkeydown, onload
.innerHTML


React = library for building user interfaces 